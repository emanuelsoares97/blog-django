"""
Django settings for blog_django project.

Generated by 'django-admin startproject' using Django 5.2.4.

This settings file is configured to work both for:
- Local development
- Production on Render

For more info: https://docs.djangoproject.com/en/5.2/topics/settings/
"""

import os
import sys
from pathlib import Path


# Load .env for local development only
if os.environ.get("DJANGO_ENV") != "production":
    from dotenv import load_dotenv
    load_dotenv()


# Base directory
BASE_DIR = Path(__file__).resolve().parent.parent


# Secret key
SECRET_KEY = os.environ.get('SECRET_KEY')
if not SECRET_KEY:
    raise Exception('SECRET_KEY not found!')


# Debug mode
# True for local development, False in production
DEBUG = os.environ.get("DJANGO_ENV") != "production"


# Allowed hosts
# Only allow Render domain in production
if os.environ.get("DJANGO_ENV") == "production":
    RENDER_DOMAIN = os.environ.get("RENDER_DOMAIN")
    if not RENDER_DOMAIN:
        raise Exception("RENDER_DOMAIN not found in environment!")
    ALLOWED_HOSTS = [RENDER_DOMAIN]
else:
    ALLOWED_HOSTS = ["127.0.0.1", "localhost"]


# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': os.environ.get('DB_PORT'),
    }
}

# Use in-memory SQLite for tests
if 'test' in sys.argv:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': ':memory:',
        }
    }


# Email configuration
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'


# Google OAuth credentials
GOOGLE_CLIENT_ID = os.environ.get('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = os.environ.get('GOOGLE_CLIENT_SECRET')


# Application definition
INSTALLED_APPS = [
    'crispy_forms',
    'crispy_bootstrap4',
    'users.apps.UsersConfig',
    'blog.apps.BlogConfig',

    # Third-party apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'cloudinary',
    'cloudinary_storage',

    # Social providers
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',

    # Django contrib apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.humanize',

    # Custom apps
    'private_messages',
    'notifications.apps.NotificationsConfig',
]

SITE_ID = 1
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' if DEBUG else 'django.core.mail.backends.smtp.EmailBackend'

# Social login config
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_LOGIN_ON_GET = True
SOCIALACCOUNT_ADAPTER = 'users.adapters.MySocialAccountAdapter'


# Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",  # For serving static files in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = 'blog_django.urls'


# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'blog.context_processors.sidebar_data',
                'notifications.context_processors.unread_notifications_count',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog_django.wsgi.application'


# Authentication backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]


# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JS)
# In production, Render will serve static files with `collectstatic`
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


# Cloudinary (all uploaded media goes to Cloudinary)
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.environ.get('CLOUDINARY_CLOUD_NAME'),
    'API_KEY': os.environ.get('CLOUDINARY_API_KEY'),
    'API_SECRET': os.environ.get('CLOUDINARY_API_SECRET'),
}
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'


# Login/Logout redirects
LOGIN_REDIRECT_URL = 'blog-home'
LOGOUT_REDIRECT_URL = 'login'
LOGIN_URL = 'login'


# Crispy Forms
CRISPY_TEMPLATE_PACK = 'bootstrap4'


# Social account providers
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {'client_id': GOOGLE_CLIENT_ID, 'secret': GOOGLE_CLIENT_SECRET},
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online', 'prompt': 'select_account'},
        'METHOD': 'oauth2',
    }
}


# Logging
LOGS_DIR = BASE_DIR / "logs"
os.makedirs(LOGS_DIR, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {'standard': {'format': '%(asctime)s | %(levelname)s | %(name)s | %(message)s'}},
    'handlers': {
        'general_file': {'level': 'INFO', 'class': 'logging.FileHandler', 'filename': LOGS_DIR / 'logs_geral.log', 'formatter': 'standard'},
        'error_file': {'level': 'ERROR', 'class': 'logging.FileHandler', 'filename': LOGS_DIR / 'logs_erros.log', 'formatter': 'standard'},
        'debug_file': {'level': 'DEBUG', 'class': 'logging.FileHandler', 'filename': LOGS_DIR / 'logs_debug.log', 'formatter': 'standard'},
    },
    'loggers': {
        '': {'handlers': ['general_file', 'error_file', 'debug_file'], 'level': 'DEBUG', 'propagate': True},
    }
}