name: CI/CD Pipeline

# Trigger the workflow on push to main branch
on:
  push:
    branches: [ main ]

jobs:

  # Build & Test

  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository code
      - name: Checkout
        uses: actions/checkout@v4

      # Validate that all required secrets are defined
      - name: Validate secrets
        run: |
          REQUIRED_SECRETS=(SECRET_KEY DB_NAME DB_USER DB_PASSWORD DB_HOST DB_PORT EMAIL_HOST_USER EMAIL_HOST_PASSWORD GOOGLE_CLIENT_ID GOOGLE_CLIENT_SECRET)
          for secret in "${REQUIRED_SECRETS[@]}"; do
            if [ -z "${!secret}" ]; then
              echo "Missing secret: $secret"
              exit 1
            fi
          done
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

      # Clean up old Docker images to prevent conflicts
      - name: Cleanup old Docker images
        run: docker image prune -af

      # Build Docker image for testing
      - name: Build Docker image
        run: docker build . --file Dockerfile --tag blog-app:test

      # List Docker images to confirm the build succeeded
      - name: List Docker images
        run: docker images

      # Create an env-file containing all secrets for Docker
      - name: Create env file for Docker
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> env.list
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> env.list
          echo "DB_USER=${{ secrets.DB_USER }}" >> env.list
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> env.list
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> env.list
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> env.list
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> env.list
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> env.list
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> env.list
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> env.list

      # Run Django tests inside the Docker container
      # --rm: remove container after it finishes
      # --env-file env.list: load all environment variables from the file
      # blog-app:test: use the image built in the previous step
      # bash -c "python manage.py test": execute Django tests inside container
      - name: Run tests inside the container
        run: docker run --rm --env-file env.list blog-app:test bash -c "python manage.py test"


  # Deploy to Render

  deploy:
    needs: build-and-test         # Only runs if build-and-test passes
    runs-on: ubuntu-latest
    if: ${{ success() }}         # Extra safety

    steps:
      #Checkout repository (safe to repeat)
      - name: Checkout repository
        uses: actions/checkout@v3

      #Trigger Render Deploy via Deploy Hook
      - name: Deploy to Render
        run: |
          curl "$RENDER_DEPLOY_HOOK"
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
