name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Validação dos secrets necessários
      - name: Validate secrets
        run: |
          REQUIRED_SECRETS=(SECRET_KEY DB_NAME DB_USER DB_PASSWORD DB_HOST DB_PORT EMAIL_HOST_USER EMAIL_HOST_PASSWORD GOOGLE_CLIENT_ID GOOGLE_CLIENT_SECRET)
          for secret in "${REQUIRED_SECRETS[@]}"; do
            if [ -z "${!secret}" ]; then
              echo "❌ Missing secret: $secret"
              exit 1
            else
              echo "✅ $secret OK"
            fi
          done
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

      # Limpeza opcional de imagens antigas
      - name: Cleanup old Docker images
        run: docker image prune -af

      # Build da imagem Docker
      - name: Build Docker image de testes
        run: docker build . --file Dockerfile --tag blog-app:test

      # Listar imagens para confirmar que build ocorreu
      - name: List Docker images
        run: docker images

      # Criar ficheiro env.list com todos os secrets
      - name: Create env file for Docker
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> env.list
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> env.list
          echo "DB_USER=${{ secrets.DB_USER }}" >> env.list
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> env.list
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> env.list
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> env.list
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> env.list
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> env.list
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> env.list
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> env.list

      # Run dos testes dentro do container usando o env-file
      - name: Run tests dentro do container
        run: docker run --rm --env-file env.list blog-app:test bash -c "python manage.py test"