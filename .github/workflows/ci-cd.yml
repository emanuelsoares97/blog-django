name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate secrets
        run: |
          REQUIRED_SECRETS=(SECRET_KEY DB_NAME DB_USER DB_PASSWORD DB_HOST DB_PORT EMAIL_HOST_USER EMAIL_HOST_PASSWORD GOOGLE_CLIENT_ID GOOGLE_CLIENT_SECRET)
          for secret in "${REQUIRED_SECRETS[@]}"; do
            if [ -z "${!secret}" ]; then
              echo "❌ Missing secret: $secret"
              exit 1
            else
              echo "✅ $secret OK"
            fi
          done
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

      - name: Build Docker image de testes
        run: docker build . --file Dockerfile --tag blog-app:test

      - name: Debug: see if image exists
        run: docker images | grep blog-app

      - name: Debug: show docker run command
        run: |
          echo docker run --rm \
            -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} \
            -e EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} \
            -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
            -e GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
            blog-app:test bash -c "python manage.py test"

      - name: Run tests dentro do container
        run: >
          docker run --rm
          -e SECRET_KEY=${{ secrets.SECRET_KEY }}
          -e DB_NAME=${{ secrets.DB_NAME }}
          -e DB_USER=${{ secrets.DB_USER }}
          -e DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          -e DB_HOST=${{ secrets.DB_HOST }}
          -e DB_PORT=${{ secrets.DB_PORT }}
          -e EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
          -e EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          -e GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          blog-app:test bash -c "python manage.py test"
